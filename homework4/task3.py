"""Сложность O(n*m)"""
def minDistance(word1: str, word2: str) -> int:
    n, m = len(word1), len(word2) # переменные длины первого и второго слова
    # создаем матрицу n + 1 на m + 1, учитывая пустые строки
    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

    """Заполняем первую строку в соответствии с тем, сколько операций нужно совершить, чтобы преобразовать пустую строку к текущей последовательности."""
    for col in range(n + 1):
        dp[0][col] = col

    """Заполняем первую колонку в соответствии с тем, сколько операций нужно совершить, чтобы преобразовать пустую строку к текущей последовательности."""
    for row in range(m + 1):
        dp[row][0] = row

    """Проходимся по буквам в словах и сравниваем их между собой"""
    for col in range(1, n + 1):
        for row in range(1, m + 1):
            if word1[col - 1] == word2[row - 1]: # если они равны, мин. кол-во операций будет = кол-ву операций без этих букв
                dp[row][col] = dp[row - 1][col - 1]
            else:
                dp[row][col] = min(dp[row - 1][col], dp[row][col - 1]) + 1 # если они не равны, берем мин из предыдущих операций и прибавляем 1
    return dp[-1][-1] # последняя ячейка содержит мин. кол-во операций для преобразования исходных строк
